#Hapilin
b = dict()
for i in range(int(input())-1):
    a = input().split()
    b.update({a[0]:a[1]})

for k,v in sorted(b.items()):
    d = int(0)
    c = k
    while True:
        if k in b.keys():
            k = b[k]
            d+=1
        else:
            break
    if d-1 == 0:
        break

for i in range(int(input())):
    a = input().split()
    ciunt = a[0]
    count = a[1]
    try:
        while ciunt != count and ciunt != k:
            ciunt = b[ciunt]
        flag = 1
    except:
        while a[1] != a[0] and a[1] != k:
            a[1] = b[a[1]]
        flag = 2
    else:
        while a[1] != a[0] and a[1] != k:
            a[1] = b[a[1]]
            if a[1] == a[0]:
                flag = 2
    if ciunt == count and flag == 1:
        print("2", end = " ")
    elif a[0] == a[1] and flag == 2:
        print("1", end = " ")
    else:
        print("0", end = " ")
        
        
def is_ancestor(man, older_man):
    if man == older_man:
        return True
    while man in p_tree:
        man = p_tree[man]
        if man == older_man:
            return True
    return False
    
p_tree = dict()
n = int(input())
for i in range(n - 1):
    child, parent = input().split()
    p_tree[child] = parent

for i in range(int(input())):
    first, second = input().split()
    if is_ancestor(second, first):
        print(1, end=' ')
    elif is_ancestor(first, second):
        print(2, end=' ')
    else:
        print(0, end=' ')


def tree(elem1, elem2):
    if A.get(elem1, 0) != 0 and elem2 in A[elem1]:
        return 1
    elif A.get(elem2, 0) != 0 and elem1 in A[elem2]:
        return 2
    else:
        return 0

A= {}
for n in range(int(input())-1):
    child, father = [str(i) for i in input().split()]
    if father not in A.keys():
        A[father] = []
    A[father].append(child)
for i in A.keys():
    for j in A[i]:
        if j in A.keys():
            A[i].extend(A[j])
for i in range(int(input())):
    a, b = [str(i) for i in input().split()]
    print(tree(a, b), end = " ")


def predok (people1, people2):
    if people1 not in p_tree: return 0
    else:
        a = 0
        if p_tree[people1] == people2: a = 1
        return a + predok(p_tree[people1], people2)

p_tree = {}
for i in range(int(input()) - 1):
    child, parent = input().split()
    p_tree[child] = parent
#print(p_tree)
for i in range(int(input())):
    p1, p2 = input().split()
    if predok(p1, p2): a = 2
    elif predok(p2, p1): a = 1
    else: a = 0
    print(a, end=" ")


